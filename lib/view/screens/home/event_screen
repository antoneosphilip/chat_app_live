import 'package:flutter/material.dart';



class EventsCenterScreen extends StatelessWidget {
  final List<EventItem> events = [
    EventItem(
      title: 'مهمة ID جديد',
      colors: [Color(0xFF8B4513), Color(0xFFFF8C00), Color(0xFFFFD700)],
      hasWings: true,
      isGolden: true,
    ),
    EventItem(
      title: 'عالم جديد',
      subtitle: 'مكافآت لدعم الأسبوع الأول',
      timeText: '05/29 0:00 -- 07/29 23:59 (GMT+3)',
      colors: [Color(0xFF4B0082), Color(0xFF8A2BE2), Color(0xFFDA70D6)],
      hasWings: false,
      isGolden: false,
    ),
    EventItem(
      title: 'SADA',
      subtitle: 'مكافآت لدعم الأسبوع الأول',
      colors: [Color(0xFF8B4513), Color(0xFFFF8C00), Color(0xFFFFD700)],
      hasWings: true,
      isGolden: true,
    ),
    EventItem(
      title: 'SADA',
      subtitle: 'مسابقة تسريع الوكالة',
      colors: [Color(0xFF1E90FF), Color(0xFF00BFFF), Color(0xFF87CEEB)],
      hasWings: true,
      isGolden: true,
    ),
    EventItem(
      title: 'كرنفال',
      subtitle: 'UNO',
      colors: [Color(0xFF4B0082), Color(0xFF8A2BE2), Color(0xFFFF1493)],
      hasWings: false,
      isGolden: false,
      hasStars: true,
    ),
    EventItem(
      title: 'SADA',
      subtitle: 'ملك السجائر المتريدة',
      colors: [Color(0xFF8B4513), Color(0xFFFF8C00), Color(0xFFDAA520)],
      hasWings: true,
      isGolden: true,
    ),
    EventItem(
      title: '',
      subtitle: '',
      colors: [Color(0xFF006400), Color(0xFF32CD32), Color(0xFF7CFC00)],
      hasWings: true,
      isGolden: true,
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
         gradient: LinearGradient(
                    colors: [Color(0xFF7F7FD5), Color(0xFF91EAE4)],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
             
        ),
        child: SafeArea(
          child: Column(
            children: [
              // AppBar الملون
              Container(
                width: double.infinity,
                height: 120,
              
                child: SafeArea(
                  child: Center(
                    child: Stack(
                      alignment: Alignment.center,
                      children: [
                        Align(
                          alignment: Alignment.centerLeft,
                          child: IconButton(
                            icon: Icon(Icons.arrow_back, color: Colors.white, size: 26),
                            onPressed: () {},
                          ),
                        ),
                        Center(
                          child: Text(
                            'Events Center',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 22,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
              
              // White Container for Events
              Expanded(
                child: Container(
                  margin: EdgeInsets.only(top: 8),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(20),
                      topRight: Radius.circular(20),
                    ),
                  ),
                  child: ListView.builder(
                    padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                    itemCount: events.length,
                    itemBuilder: (context, index) {
                      return _buildEventCard(events[index]);
                    },
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildEventCard(EventItem event) {
    return Container(
      margin: EdgeInsets.only(bottom: 12),
      height: 150,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: event.colors,
          begin: Alignment.centerLeft,
          end: Alignment.centerRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black26,
            blurRadius: 8,
            offset: Offset(0, 4),
          ),
        ],
      ),
      child: Stack(
        children: [
          // Background decorative elements
          if (event.hasWings) ...[
            Positioned(
              left: -20,
              top: 10,
              child: _buildWing(true),
            ),
            Positioned(
              right: -20,
              top: 10,
              child: _buildWing(false),
            ),
          ],
          
          if (event.hasStars) ...[
            Positioned(
              left: 20,
              top: 20,
              child: Icon(Icons.star, color: Colors.white, size: 16),
            ),
            Positioned(
              right: 30,
              top: 30,
              child: Icon(Icons.star, color: Colors.white, size: 12),
            ),
            Positioned(
              left: 40,
              bottom: 25,
              child: Icon(Icons.star, color: Colors.white, size: 14),
            ),
            Positioned(
              right: 50,
              bottom: 20,
              child: Icon(Icons.star, color: Colors.white, size: 10),
            ),
          ],
          
          // Content
          Positioned.fill(
            child: Container(
              padding: EdgeInsets.symmetric(horizontal: 20, vertical: 16),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  if (event.timeText != null) ...[
                    Text(
                      event.timeText!,
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 12,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    SizedBox(height: 8),
                  ],
                  
                  // Main title with decorative border
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    decoration: BoxDecoration(
                      color: event.isGolden ? Color(0xFFFFD700) : Colors.white,
                      borderRadius: BorderRadius.circular(25),
                      border: Border.all(
                        color: event.isGolden ? Color(0xFFB8860B) : Colors.grey.shade300,
                        width: 2,
                      ),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black26,
                          blurRadius: 4,
                          offset: Offset(0, 2),
                        ),
                      ],
                    ),
                    child: Text(
                      event.title,
                      style: TextStyle(
                        color: event.isGolden ? Color(0xFF8B4513) : Colors.black,
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                  
                  if (event.subtitle.isNotEmpty) ...[
                    SizedBox(height: 8),
                    Text(
                      event.subtitle,
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 14,
                        fontWeight: FontWeight.w500,
                      ),
                      textAlign: TextAlign.center,
                    ),

                  ],
                ],
              ),
            ),
          ),
          
          // Decorative gems/jewels
          if (event.isGolden) ...[
            Positioned(
              left: 10,
              top: 15,
              child: _buildGem(Colors.red),
            ),
            Positioned(
              right: 10,
              top: 15,
              child: _buildGem(Colors.blue),
            ),
            Positioned(
              left: 15,
              bottom: 15,
              child: _buildGem(Colors.green),
            ),
            Positioned(
              right: 15,
              bottom: 15,
              child: _buildGem(Colors.purple),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildWing(bool isLeft) {
    return Transform.scale(
      scaleX: isLeft ? 1 : -1,
      child: Container(
        width: 60,
        height: 40,
        decoration: BoxDecoration(
          color: Colors.amber.withOpacity(0.8),
          borderRadius: BorderRadius.only(
            topRight: Radius.circular(30),
            bottomRight: Radius.circular(30),
            topLeft: Radius.circular(10),
            bottomLeft: Radius.circular(10),
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.amber.withOpacity(0.5),
              blurRadius: 8,
              offset: Offset(0, 2),
            ),
          ],
        ),
        child: CustomPaint(
          painter: WingPainter(),
        ),
      ),
    );
  }

  Widget _buildGem(Color color) {
    return Container(
      width: 16,
      height: 16,
      decoration: BoxDecoration(
        color: color,
        shape: BoxShape.circle,
        border: Border.all(color: Colors.white, width: 1),
        boxShadow: [
          BoxShadow(
            color: color.withOpacity(0.5),
            blurRadius: 4,
            offset: Offset(0, 2),
          ),
        ],
      ),
    );
  }
}

class EventItem {
  final String title;
  final String subtitle;
  final String? timeText;
  final List<Color> colors;
  final bool hasWings;
  final bool isGolden;
  final bool hasStars;

  EventItem({
    required this.title,
    this.subtitle = '',
    this.timeText,
    required this.colors,
    required this.hasWings,
    required this.isGolden,
    this.hasStars = false,
  });
}

class WingPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.white.withOpacity(0.3)
      ..strokeWidth = 1
      ..style = PaintingStyle.stroke;

    final path = Path();
    path.moveTo(size.width * 0.2, size.height * 0.3);
    path.quadraticBezierTo(
      size.width * 0.6, size.height * 0.1,
      size.width * 0.8, size.height * 0.5,
    );
    path.quadraticBezierTo(
      size.width * 0.6, size.height * 0.9,
      size.width * 0.2, size.height * 0.7,
    );

    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}